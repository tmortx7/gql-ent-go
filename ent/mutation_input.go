// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/tmortx7/gql-ent-go/ent/schema/ulid"
)

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ID        ulid.ID
	FirstName *string
	LastName  *string
	Email     *string
	Password  *string
	UpdatedAt *time.Time
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
